#!/bin/sh


usage_and_die() {
    {
        echo 'Extracts kernel parameters from /proc/cmdline.'
        echo 'If parameter is absent, return DEFAULT_VALUE (if set) or exit with status 1.'
        echo "Usage: $0 PARAMETER [DEFAULT_VALUE]"
    } >&2
    exit 1
}

try() {
    # This is bare whitespace. Cut here.
    to_try="$1"
    want="$2"
    name="${to_try%%=*}"
    value="${to_try#*=}"
    if [ "$name" = "$want" ]; then
        printf "%s\n" "$value"
        exit 0
    fi
    return 1
}

substr() {
    str="$1"
    start="$2"
    len="${3:-${#str}}"

    # expr substr 1-indexes because we're in a hell world.
    expr substr "$str" "$((start+1))" "$len"
}

# Finds the $2 kernel param value in $1, emitting if absent and $3 is provided.
lookup() {
    to_parse="$1"

    in_sq_context=false
    in_dq_context=false
    esc=false
    tail=0
    head=0

    while [ "$head" -lt "${#to_parse}" ]; do
        char="$(substr "$to_parse" "$head" 1)"

        if [ "$esc" = "true" ]; then # char is escaped, skipping.
            esc=false
            head="$((head+1))"
            continue
        fi

        zap_char=

        case "$char" in
            " "|"	"|"\n")
                if [ "$in_sq_context" = "false" ] && [ "$in_dq_context" = "false" ]; then
                    # This is bare whitespace. Cut here.

                    to_try="$(substr "$to_parse" "$tail" "$((head-tail))")"
                    try "$to_try" "$2"
                    # Haven't found it yet; mark our tail here and keep going.
                    tail="$((head+1))"
                fi
                ;;
            "'")
                if [ "$in_dq_context" = "true" ]; then
                    # This is a ' within doublequotes. Don't parse it.
                    head="$((head+1))"
                    continue
                elif [ "$in_sq_context" = "true" ]; then
                    # This is a closing quote.
                    in_sq_context=false
                    zap_char=y
                else
                    # This is an opening quote.
                    in_sq_context=true
                    zap_char=y
                fi
                ;;
            '"')
                if [ "$in_sq_context" = "true" ]; then
                    # This is a " within singlequotes. Don't parse it.
                    head="$((head+1))"
                    continue
                elif [ "$in_dq_context" = "true" ]; then
                    # This is a closing quote.
                    in_dq_context=false
                    zap_char=y
                else
                    # This is an opening quote.
                    in_dq_context=true
                    zap_char=y
                fi
                ;;
            '\')
                esc=true
                next="$(substr "$to_parse" "$((head+1))" 1)"
                case "$next" in
                    "'" | '"' | '\')
                        zap_char=y
                        ;;
                esac
                ;;
        esac
        if [ "$zap_char" != "" ]; then
            pref="$(substr "$to_parse" 0 "$head")"
            suff="$(substr "$to_parse" "$((head + 1))")"
            to_parse="$pref$suff"
        else
            head="$((head+1))"
        fi
    done

    # Let's try whatever we've got left.
    to_try="$(substr "$to_parse" "$tail")"
    if ! try "$to_try" "$2" && [ "$#" -eq 3 ]; then
        printf "%s\n" "$3"
        exit 0
    else
        exit 1
    fi
}

if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
    usage_and_die
fi

__CMDLINE="${TESTONLY_ALTERNATIVE_CMDLINE:-/proc/cmdline}"
TO_PARSE="$(cat "$__CMDLINE")"
lookup "$TO_PARSE" "$@"
